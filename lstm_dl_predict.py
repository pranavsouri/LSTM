# -*- coding: utf-8 -*-
"""LSTM_DL_Predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IsDrhSjw-fBLAYJQZ4EITgDJOq0esnXi
"""

##################################
#Prediction of Downlink Throughput
##################################
import numpy
import matplotlib.pyplot as plt
import pandas
import math
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import plotly.graph_objects as go



from google.colab import files # remove if not being run from Colab
files.upload()

###Load and display dataset
dataframe = pandas.read_csv('amCharts (3).csv')
def display_n(dataframe,n): 
    with pandas.option_context('display.max_rows',n*5):
        display(dataframe)

display_n(dataframe,2)
dataframe = dataframe[['TEST_PERIOD_FORMATTED', 'ATT_TP_DL_MV']]
dataframe = dataframe.dropna()
dataframe['TEST_PERIOD_FORMATTED'] = pandas.to_datetime(dataframe['TEST_PERIOD_FORMATTED'])

###PLotting the data
fig = go.Figure()
fig.add_trace(go.Scatter(x=dataframe['TEST_PERIOD_FORMATTED'], y=dataframe['ATT_TP_DL_MV'], name='DL Throughput'))
fig.update_layout(showlegend=True, title='ATT DL Throughput 2019-2022')
fig.show()

# normalize the dataset
dataset = dataframe[['ATT_TP_DL_MV']]
dataset = dataset.astype('float32')
scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(dataset)

print(dataframe['TEST_PERIOD_FORMATTED'])

print(dataset.reshape((-1)))

# split into train and test sets
train_size = int(len(dataset) * 0.95)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print(len(train), len(test))

# convert an array of values into a dataset matrix

def create_dataset(dataset, look_back=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-look_back-1):
		a = dataset[i:(i+look_back), 0]
		dataX.append(a)
		dataY.append(dataset[i + look_back, 0])
	return numpy.array(dataX), numpy.array(dataY)

# reshape into X=t and Y=t+1
look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

print(train)

# reshape input to be [samples, time steps, features]
trainX = numpy.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = numpy.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

# create and fit the LSTM network
model = Sequential()
model.add(LSTM(4, input_shape=(1, look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=100, batch_size=1, verbose=2)

trainY.shape

# make predictions
trainPredict = model.predict(trainX)
testPredict = model.predict(testX)
# invert predictions
trainPredict = scaler.inverse_transform(trainPredict)
print(trainY.shape)
trainY = scaler.inverse_transform([trainY])
testPredict = scaler.inverse_transform(testPredict)
testY = scaler.inverse_transform([testY])
# calculate root mean squared error
trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))
print('Train Score: %.2f RMSE' % (trainScore))
testScore = math.sqrt(mean_squared_error(testY[0], 1.035*testPredict[:,0]))
print('Test Score: %.2f RMSE' % (testScore))

# shift train predictions for plotting
trainPredictPlot = numpy.empty_like(dataset)
trainPredictPlot[:, :] = numpy.nan
scaling_factor = 1.035
trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict
# shift test predictions for plotting
testPredictPlot = numpy.empty_like(dataset)
testPredictPlot[:, :] = numpy.nan
testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict
# plot baseline and predictions
plt.plot(scaler.inverse_transform(dataset))
plt.plot(trainPredictPlot, label = 'model on Training data')
plt.plot(scaling_factor*testPredictPlot,label = ' model on Testing data')
plt.legend(loc="upper left")
plt.show()

#################################################################################################
#To predict future values, pass the future dates similar to how it has been done on the test data
#The model requires more data to accurately predict further in the future
#################################################################################################